"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.viteSingleFile = void 0;
const chalk_1 = __importDefault(require("chalk"));
function viteSingleFile() {
    return {
        name: "vite:singlefile",
        transformIndexHtml: {
            enforce: "post",
            transform(html, ctx) {
                // Only use this plugin during build
                if (!ctx || !ctx.bundle)
                    return html;
                // Get the bundle
                let extraCode = "";
                for (const [, value] of Object.entries(ctx.bundle)) {
                    const o = value;
                    const a = value;
                    if (o.code) {
                        const reScript = new RegExp(`<script type="module"[^>]*?src="[\./]*${o.fileName}"[^>]*?></script>`);
                        const code = `<script type="module">\n//${o.fileName}\n${o.code}\n</script>`;
                        html = html.replace(reScript, (_) => code);
                    }
                    else if (a.fileName.endsWith(".css")) {
                        const reCSS = new RegExp(`<link rel="stylesheet"[^>]*?href="[\./]*${a.fileName}"[^>]*?>`);
                        const code = `<style type="text/css">\n${a.source}\n</style>`;
                        html = html.replace(reCSS, (_) => code);
                    }
                    else {
                        console.warn(`${chalk_1.default.yellow("WARN")} asset not inlined: ${chalk_1.default.green(a.fileName)}`);
                    }
                }
                return html.replace(/<\/body>/, extraCode + "</body>");
            },
        },
    };
}
exports.viteSingleFile = viteSingleFile;
